name: Build WebUI-Server
on:
  push:
env:
  APP_NAME: "WebCFace WebUI Server.app"
  TAG: "v1.5.2" # todo: あとでかえる
jobs:
  build:
    runs-on: macos-13
    steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - run: git clone https://github.com/na-trium-144/webcface-webui.git
    - name: Patch source code
      working-directory: webcface-webui/electron/main
      run: |
        sed '2i\
        process.env.PATH = app.getPath("exe").split("/").slice(0, -1).join("/") + "/../bin:" + process.env.PATH;
        ' index.ts > new_index.ts
        mv new_index.ts index.ts
    - run: npm install --prefer-offline --no-audit --maxsockets 1
      working-directory: webcface-webui
    - run: npm run ebuild
      working-directory: webcface-webui
    - run: mv webcface-webui/release/mac/*.app "$APP_NAME"
    - name: Install webcface
      run: |
        git clone -b 4.8.0 https://github.com/opencv/opencv.git
        git clone -b v1.5.2 https://github.com/na-trium-144/webcface.git
        git clone -b v1.3.0 https://github.com/na-trium-144/webcface-tools.git
        cmake -Bbuild_opencv -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DOPENCV_FORCE_3RDPARTY_BUILD=ON \
          -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_PROTOBUF=OFF -DWITH_IMGCODEC_HDR=OFF \
          -DWITH_IMGCODEC_SUNRASTER=OFF -DWITH_IMGCODEC_PXM=OFF -DWITH_IMGCODEC_PFM=OFF \
          -DWITH_FLATBUFFERS=OFF -DWITH_OPENCL=OFF \
          -DBUILD_JAVA=OFF -DBUILD_OBJC=OFF \
          opencv
        cmake --build build_opencv -t install
        cmake -Bbuild_webcface -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(pwd)/install -DCMAKE_INSTALL_PREFIX=$(pwd)/install webcface
        cmake --build build_webcface -t install
        cmake -Bbuild_tools -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(pwd)/install -DCMAKE_INSTALL_PREFIX=$(pwd)/install webcface-tools
        cmake --build build_tools -t install
        mv install/bin install/lib install/share "$APP_NAME/Contents/"
    - run: zip -r "${APP_NAME}.zip" "$APP_NAME"
    - uses: actions/upload-artifact@v3
      with:
        name: app
        path: "*.zip"
  
  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: app
    - name: Create Tag
      uses: EndBug/latest-tag@latest
      with:
        ref: ${{env.TAG}}
    - name: Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "*.zip"
        makeLatest: true
        tag: ${{env.TAG}}


